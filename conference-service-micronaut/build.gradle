plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
}
group = 'conference.service.micronaut'
version = '0.1'
repositories {
    jcenter()
    mavenCentral()
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}
configurations {
    developmentOnly
    all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                // specifying a fixed version for all libraries with 'io.micronaut.data' group
                if (details.requested.group == 'io.micronaut.data') {
                    details.useVersion micronautDataVersion
                }
            }
        }
    }
}
dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")

    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-graal"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"

    compileOnly "org.graalvm.nativeimage:svm"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "jakarta.persistence:jakarta.persistence-api:2.2.2"
    implementation "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"
    implementation "io.micronaut:micronaut-management"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime "com.h2database:h2"
    runtime "io.micronaut.configuration:micronaut-jdbc-tomcat"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "org.assertj:assertj-core:3.15.0"
    testCompile "org.mockito:mockito-core:3.3.0"
    testCompile "io.rest-assured:rest-assured:4.1.1"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "nl.craftsmen.conference.service.micronaut.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

task nativeImage(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = project.mainClassName
    executable = 'native-image'
    jvmArgs '--no-server', '-J-Xmx7g'
}